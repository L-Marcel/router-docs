generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                  String          @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String          @id @default(cuid())
  sessionToken        String          @unique
  userId              String
  expires             DateTime
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]

  createdAt           DateTime        @default(now())

  projects            Project[]
}

model VerificationToken {
  identifier          String
  token               String          @unique
  expires             DateTime

  @@unique([identifier, token])
}

model Project {
  id                  String          @id @default(uuid())
  name                String
  description         String          @default("")
  repository          String
  root                String          @default("/")
  baseUrl             String?
  createdAt           DateTime        @default(now())

  routers             Route[] 

  user                User            @relation(fields: [userId], references: [id])
  userId              String            
}

model Route {
  id                  String          @id @default(uuid())
  name                String
  path                String          @default("/")
  description         String          @default("")
  type                String          @default("get")
  position            Int             @default(0)
  createdAt           DateTime        @default(now())

  options             Option[]

  project             Project         @relation(fields: [projectId], references: [id])
  projectId           String
}

model Option {
  id                  String          @id @default(uuid())
  type                String          @default("body")
  name                String
  value               String
  validation          String?
  isRequired          Boolean         @default(true)
  position            Int             @default(0)
  createdAt           DateTime        @default(now())

  route               Route?          @relation(fields: [routeId], references: [id])
  routeId             String?
 
  arrayItems          Option[]        @relation("ArrayGroup")

  arrayGroup          Option?         @relation("ArrayGroup", fields: [arrayGroupId], references: [id])
  arrayGroupId        String?
}